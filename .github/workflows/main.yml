name: MLOPs_Project_WILP

on:
  push:
    branches:
      - main  # Triggers on push to the 'main' branch
  pull_request:
    branches:
      - main  # Triggers on pull requests targeting the 'main' branch

jobs:
  linting:      # Job to lint the code using flake8
    runs-on: ubuntu-latest   # Runs on the latest Ubuntu image
    steps:
      - name: Checkout code
        uses: actions/checkout@v2   # Checks out the code
      - name: Set up Python
        uses: actions/setup-python@v2   # Sets up Python 3.8
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Installs dependencies from requirements.txt
      - name: Lint with flake8
        run: |
          pip install flake8   # Installs flake8
          flake8 --max-line-length=120 --verbose .   # Runs flake8 on the current directory

  testing:      # Job to run tests using unittest
    runs-on: ubuntu-latest   # Runs on the latest Ubuntu image
    needs: linting   # This job depends on the 'linting' job completing successfully
    steps:
      - name: Checkout code
        uses: actions/checkout@v2   # Checks out the code
      - name: Set up Python
        uses: actions/setup-python@v2   # Sets up Python 3.8
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Installs dependencies from requirements.txt
      - name: Run tests
        run: |
          python -m unittest discover   # Runs tests using unittest

  deploying:    # Job to train the model and deploy it
    runs-on: ubuntu-latest   # Runs on the latest Ubuntu image
    needs: testing   # This job depends on the 'testing' job completing successfully
    steps:
      - name: Checkout code
        uses: actions/checkout@v2   # Checks out the code
        with:
          submodules: true   # Ensures submodules are checked out, if any
      - name: Set up Python
        uses: actions/setup-python@v2   # Sets up Python 3.8
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Installs dependencies from requirements.txt
      - name: Train the model
        run: |
          python model.py  # Runs the model training script (model.py)
          # Optionally save the model using joblib or pickle
          # joblib.dump(model, 'model.pkl')
      - name: Upload model to artifact storage
        uses: actions/upload-artifact@v4  # Updated to v4
        with:
          name: model
          path: model.pkl  # Path to the saved model file

  dockerize:    # Job to build and run Docker container
    runs-on: ubuntu-latest  # Runs on the latest Ubuntu image
    needs: deploying  # This job depends on the 'deploying' job completing successfully
    steps:
      - name: Checkout code
        uses: actions/checkout@v2   # Checks out the code
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # Sets up Docker Buildx
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build Docker image
        run: |
          docker build -t flask-ml-app .  # Builds the Docker image using the Dockerfile in the repo
      - name: Run Docker container
        run: |
          docker run -d -p 5001:5001 flask-ml-app  # Run the container and map port 5001
          sleep 20  # Wait for the Flask app to start
          curl -f http://localhost:5001/predict_get?features=1.2&features=3.4&features=5.6&features=7.8&features=9.0&features=10.1&features=12.3&features=15.6  # Test the Flask API
      - name: Stop and remove Docker container
        run: |
          docker ps -q --filter "ancestor=flask-ml-app" | xargs docker stop
          docker ps -aq --filter "ancestor=flask-ml-app" | xargs docker rm
